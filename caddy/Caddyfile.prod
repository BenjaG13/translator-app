:80 {
    # gzip responses
    encode gzip

    # Access log to stdout (JSON) -> Render mostrará esto en Live Logs
    log {
        output stdout
        format json {
            # campos recomendados (caddy rellenará los valores)
            time     {when}
            remote   {remote}
            proto    {proto}
            method   {http.request.method}
            path     {http.request.uri.path}
            query    {http.request.uri.query}
            host     {http.request.host}
            status   {http.response.status}
            size     {http.response.size}
            duration {http.duration}
            up       {http.reverse_proxy.upstream}
            up_status {http.reverse_proxy.upstream.status}
            user_agent {http.request.header.User-Agent}
            cf_ray   {http.request.header.Cf-Ray}
            rndr_id  {http.request.header.Rndr-Id}
        }
    }

    # Error log to stderr (Caddy by default logs errors to stderr; esto ayuda a que Render los muestre)
    # (Si querés agregar más verbosity podés setear env var CADDY_LOG_LEVEL=DEBUG en Render)
    # handle_errors {
    #     # opcional: custom error page o log
    # }

    # API -> backend público de Render (forzamos Host al upstream correcto)
    @api path /api/*
    handle @api {
        reverse_proxy https://translator-backend-laca.onrender.com:443 {
            transport http {
                tls
                # si necesitás debugging temporal:
                # tls_insecure_skip_verify
            }
            # Enviamos Host del upstream (evita loops)
            header_up Host translator-backend-laca.onrender.com
            # pasamos X-Forwarded (opcional)
            header_up X-Forwarded-Proto {scheme}
            header_up X-Forwarded-For {remote_host}
        }
    }

    # Resto -> frontend público de Render
    handle {
        reverse_proxy https://translator-frontend-8b1v.onrender.com:443 {
            transport http { tls }
            header_up Host translator-frontend-8b1v.onrender.com
            header_up X-Forwarded-Proto {scheme}
            header_up X-Forwarded-For {remote_host}
        }
    }
}
